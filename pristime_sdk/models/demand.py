# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pristime_sdk.models.shift_creation_settings import ShiftCreationSettings
from typing import Optional, Set
from typing_extensions import Self

class Demand(BaseModel):
    """
    Represents staffing requirements that need to be met during scheduling optimization.  A demand specifies: - **When**: Time periods requiring staff coverage (via time_series) - **How many**: Number of workers needed at each time point - **What skills**: Required qualifications for workers and shifts - **How to fulfill**: Optional shift creation settings for automatic coverage  **Time Series Format:** Demands use a time series to specify changing staffing needs over time. Each entry represents a change point where the required staffing level changes. Example: {9:00 AM: 3, 1:00 PM: 2, 5:00 PM: 0} means: - 3 workers needed from 9:00 AM to 1:00 PM - 2 workers needed from 1:00 PM to 5:00 PM - 0 workers needed after 5:00 PM  **Automatic Shift Creation:** When shift_creation_settings are provided, the system can automatically generate shifts to meet this demand if existing shifts are insufficient.  **Revenue Optimization:** Demand fulfillment generates revenue in the optimization algorithm, encouraging the system to prioritize meeting high-value staffing requirements.
    """ # noqa: E501
    id: StrictStr = Field(description="Your system's unique identifier for this demand (e.g., department ID, location ID, event ID).")
    label: Optional[StrictStr] = None
    time_series: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Staffing level requirements over time as change points. Each entry specifies when the required number of workers changes. Format: {timestamp: worker_count}. The last entry must be 0 to indicate demand end.")
    upper_limit_increment: Optional[StrictInt] = None
    timezone: StrictStr = Field(description="Timezone for interpreting the demand time series and any automatically created shifts. Should match your local business timezone.")
    required_skills: List[StrictStr] = Field(description="Skills, certifications, or qualifications that workers must possess to fulfill this demand. Only workers with all these skills will be considered.")
    required_tags: List[StrictStr] = Field(description="Tags that shifts must have to count toward fulfilling this demand. Useful for matching specific shift types, locations, or characteristics.")
    revenues: Optional[Dict[str, Any]] = None
    shift_creation_settings: Optional[ShiftCreationSettings] = None
    __properties: ClassVar[List[str]] = ["id", "label", "time_series", "upper_limit_increment", "timezone", "required_skills", "required_tags", "revenues", "shift_creation_settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Demand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shift_creation_settings
        if self.shift_creation_settings:
            _dict['shift_creation_settings'] = self.shift_creation_settings.to_dict()
        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if upper_limit_increment (nullable) is None
        # and model_fields_set contains the field
        if self.upper_limit_increment is None and "upper_limit_increment" in self.model_fields_set:
            _dict['upper_limit_increment'] = None

        # set to None if shift_creation_settings (nullable) is None
        # and model_fields_set contains the field
        if self.shift_creation_settings is None and "shift_creation_settings" in self.model_fields_set:
            _dict['shift_creation_settings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Demand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Demand) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "label": obj.get("label"),
            "time_series": obj.get("time_series"),
            "upper_limit_increment": obj.get("upper_limit_increment"),
            "timezone": obj.get("timezone"),
            "required_skills": obj.get("required_skills"),
            "required_tags": obj.get("required_tags"),
            "revenues": obj.get("revenues"),
            "shift_creation_settings": ShiftCreationSettings.from_dict(obj["shift_creation_settings"]) if obj.get("shift_creation_settings") is not None else None
        })
        return _obj


