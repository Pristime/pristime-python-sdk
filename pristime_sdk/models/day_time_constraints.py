# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Authorization` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DayTimeConstraints(BaseModel):
    """
    Daily time constraints and limits for a worker's contract.  This class defines the rules and boundaries for how much time a worker can work on a specific date. It sets both minimum requirements (guarantees) and maximum limits (to prevent overwork and comply with labor regulations).  **Key Constraint Types:** - **Contractual Time**: The standard daily hours for flextime calculations - **Expected Time**: Minimum guaranteed hours (worker gets paid even if no work) - **Assigned Time**: Limits on actual productive work hours - **Overtime**: Extra hours beyond regular time, often at premium pay rates - **Scheduled Time**: Total time including work, PTO, and recovery time  **Common Patterns:** - Full-time: 8 hours expected, up to 10 hours total (2 hours overtime max) - Part-time: 4 hours expected, up to 6 hours total - On-call: 0 hours expected, up to 12 hours available
    """ # noqa: E501
    contractual_time_minutes: Optional[Annotated[int, Field(le=1440, strict=True, ge=0)]] = None
    min_expected_time_minutes: Optional[Annotated[int, Field(le=1440, strict=True, ge=0)]] = Field(default=0, description="Minimum guaranteed hours in minutes the worker must be paid for on this date if they're scheduled at all.")
    max_expected_time_minutes: Optional[Annotated[int, Field(le=1440, strict=True, ge=0)]] = Field(default=0, description="Maximum hours in minutes the worker is expected to work on this date before it becomes overtime. Sets the boundary for regular vs overtime pay.")
    max_overtime_minutes: Optional[Annotated[int, Field(le=1440, strict=True, ge=0)]] = Field(default=1440, description="Maximum overtime hours in minutes allowed on this date.")
    min_assigned_time_minutes: Optional[Annotated[int, Field(le=1440, strict=True, ge=0)]] = Field(default=0, description="Minimum productive work time in minutes that must be assigned if the worker is scheduled.")
    max_assigned_time_minutes: Optional[Annotated[int, Field(le=1440, strict=True, ge=0)]] = Field(default=1440, description="Maximum productive work time in minutes that can be assigned on this date. Limits actual working time regardless of total scheduled time.")
    max_recovered_time_minutes: Optional[Annotated[int, Field(le=1440, strict=True, ge=0)]] = Field(default=1440, description="Maximum overtime recovery time in minutes that can be taken on this date.")
    max_pto_time_minutes: Optional[Annotated[int, Field(le=1440, strict=True, ge=0)]] = Field(default=0, description="Maximum paid time off minutes (vacation, sick leave) that can be taken on this date.")
    max_scheduled_time_minutes: Annotated[int, Field(le=1440, strict=True, ge=0)] = Field(description="Maximum total scheduled minutes on this date including work (assigned time), PTO, and recovery time. Sets overall daily time limit regardless of activity type.")
    __properties: ClassVar[List[str]] = ["contractual_time_minutes", "min_expected_time_minutes", "max_expected_time_minutes", "max_overtime_minutes", "min_assigned_time_minutes", "max_assigned_time_minutes", "max_recovered_time_minutes", "max_pto_time_minutes", "max_scheduled_time_minutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DayTimeConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if contractual_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.contractual_time_minutes is None and "contractual_time_minutes" in self.model_fields_set:
            _dict['contractual_time_minutes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DayTimeConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in DayTimeConstraints) in the input: " + _key)

        _obj = cls.model_validate({
            "contractual_time_minutes": obj.get("contractual_time_minutes"),
            "min_expected_time_minutes": obj.get("min_expected_time_minutes") if obj.get("min_expected_time_minutes") is not None else 0,
            "max_expected_time_minutes": obj.get("max_expected_time_minutes") if obj.get("max_expected_time_minutes") is not None else 0,
            "max_overtime_minutes": obj.get("max_overtime_minutes") if obj.get("max_overtime_minutes") is not None else 1440,
            "min_assigned_time_minutes": obj.get("min_assigned_time_minutes") if obj.get("min_assigned_time_minutes") is not None else 0,
            "max_assigned_time_minutes": obj.get("max_assigned_time_minutes") if obj.get("max_assigned_time_minutes") is not None else 1440,
            "max_recovered_time_minutes": obj.get("max_recovered_time_minutes") if obj.get("max_recovered_time_minutes") is not None else 1440,
            "max_pto_time_minutes": obj.get("max_pto_time_minutes") if obj.get("max_pto_time_minutes") is not None else 0,
            "max_scheduled_time_minutes": obj.get("max_scheduled_time_minutes")
        })
        return _obj


