# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from pristime_sdk.models.period import Period
from typing import Optional, Set
from typing_extensions import Self

class Availability(BaseModel):
    """
    Defines a worker's availability preferences and restrictions for scheduling.  Availability is used by the optimizer to respect worker preferences and constraints: - **Unavailable periods**: Hard constraints - worker cannot be assigned shifts during these times - **Preferred periods**: Soft preferences - optimizer tries to assign shifts during these times - **Unpreferred periods**: Soft constraints - optimizer avoids these times but can use them if needed  All periods use standard timing: start time included, end time excluded, whole minutes only.
    """ # noqa: E501
    unavailable_periods: Optional[List[Period]] = Field(default=None, description="Time periods when worker cannot work at all (vacation, appointments, other commitments). These are hard constraints - no shifts will be assigned during these times.")
    preferred_periods: Optional[List[Period]] = Field(default=None, description="Time periods when worker prefers to work (preferred hours, days off). The optimizer will prioritize assigning shifts during these times when possible.")
    unpreferred_periods: Optional[List[Period]] = Field(default=None, description="Time periods when worker prefers not to work but is available if needed (late nights, early mornings). Used as last resort or penalized in optimization.")
    __properties: ClassVar[List[str]] = ["unavailable_periods", "preferred_periods", "unpreferred_periods"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Availability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in unavailable_periods (list)
        _items = []
        if self.unavailable_periods:
            for _item_unavailable_periods in self.unavailable_periods:
                if _item_unavailable_periods:
                    _items.append(_item_unavailable_periods.to_dict())
            _dict['unavailable_periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in preferred_periods (list)
        _items = []
        if self.preferred_periods:
            for _item_preferred_periods in self.preferred_periods:
                if _item_preferred_periods:
                    _items.append(_item_preferred_periods.to_dict())
            _dict['preferred_periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unpreferred_periods (list)
        _items = []
        if self.unpreferred_periods:
            for _item_unpreferred_periods in self.unpreferred_periods:
                if _item_unpreferred_periods:
                    _items.append(_item_unpreferred_periods.to_dict())
            _dict['unpreferred_periods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Availability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Availability) in the input: " + _key)

        _obj = cls.model_validate({
            "unavailable_periods": [Period.from_dict(_item) for _item in obj["unavailable_periods"]] if obj.get("unavailable_periods") is not None else None,
            "preferred_periods": [Period.from_dict(_item) for _item in obj["preferred_periods"]] if obj.get("preferred_periods") is not None else None,
            "unpreferred_periods": [Period.from_dict(_item) for _item in obj["unpreferred_periods"]] if obj.get("unpreferred_periods") is not None else None
        })
        return _obj


