# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Authorization` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from pristime_sdk.models.broken_constraints import BrokenConstraints
from pristime_sdk.models.durations import Durations
from pristime_sdk.models.metrics import Metrics
from pristime_sdk.models.shifts import Shifts
from typing import Optional, Set
from typing_extensions import Self

class ScheduleJobResult(BaseModel):
    """
    Complete results from workforce scheduling optimization containing all assignments, metrics, and analysis.  This is the core result object containing everything you need to understand and implement the optimized schedule. It provides the assignment decisions, performance metrics, constraint violations, and operational statistics from the optimization process.  **Key Components:**  **Schedule Results:** - shifts: All shift assignments (both your provided shifts and newly created ones) - durations: Time-based summary of schedule changes and impact
    """ # noqa: E501
    metrics: Optional[Metrics] = None
    shifts: Shifts
    durations: Durations
    broken_constraints: Optional[BrokenConstraints] = None
    __properties: ClassVar[List[str]] = ["metrics", "shifts", "durations", "broken_constraints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleJobResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shifts
        if self.shifts:
            _dict['shifts'] = self.shifts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of durations
        if self.durations:
            _dict['durations'] = self.durations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broken_constraints
        if self.broken_constraints:
            _dict['broken_constraints'] = self.broken_constraints.to_dict()
        # set to None if metrics (nullable) is None
        # and model_fields_set contains the field
        if self.metrics is None and "metrics" in self.model_fields_set:
            _dict['metrics'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleJobResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ScheduleJobResult) in the input: " + _key)

        _obj = cls.model_validate({
            "metrics": Metrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "shifts": Shifts.from_dict(obj["shifts"]) if obj.get("shifts") is not None else None,
            "durations": Durations.from_dict(obj["durations"]) if obj.get("durations") is not None else None,
            "broken_constraints": BrokenConstraints.from_dict(obj["broken_constraints"]) if obj.get("broken_constraints") is not None else None
        })
        return _obj


