# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShiftRevenues(BaseModel):
    """
    Revenue parameters used by the optimization algorithm to prioritize shift assignments.  These values influence which workers get assigned to which shifts by making some assignments more economically attractive than others. Higher revenue shifts will be prioritized for assignment, and continuity bonuses encourage keeping related shifts with the same worker.  **Note:** These are optimization weights, not actual financial amounts. They help the algorithm make better assignment decisions based on business priorities.
    """ # noqa: E501
    per_assigned_hour: Optional[StrictInt] = Field(default=100, description="Revenue value per work hour for optimization calculations. Higher values make this shift more attractive for assignment.")
    continuity_revenue: Optional[StrictInt] = Field(default=0, description="Bonus revenue when this shift is assigned to the same worker as its preceding shift. Encourages consistent worker assignment for shift sequences.")
    __properties: ClassVar[List[str]] = ["per_assigned_hour", "continuity_revenue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShiftRevenues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShiftRevenues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "per_assigned_hour": obj.get("per_assigned_hour") if obj.get("per_assigned_hour") is not None else 100,
            "continuity_revenue": obj.get("continuity_revenue") if obj.get("continuity_revenue") is not None else 0
        })
        return _obj


