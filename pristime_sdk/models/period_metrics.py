# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Authorization` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PeriodMetrics(BaseModel):
    """
    Time tracking for a worker over a specific period, and flextime balance at the end of the period.
    """ # noqa: E501
    expected_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    overtime_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    assigned_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    recovered_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    pto_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    flextime_negative_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    flextime_positive_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    flextime_balance_minutes: Optional[StrictInt] = None
    active_days: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    expected_days: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    __properties: ClassVar[List[str]] = ["expected_time_minutes", "overtime_minutes", "assigned_time_minutes", "recovered_time_minutes", "pto_time_minutes", "flextime_negative_minutes", "flextime_positive_minutes", "flextime_balance_minutes", "active_days", "expected_days"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PeriodMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expected_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.expected_time_minutes is None and "expected_time_minutes" in self.model_fields_set:
            _dict['expected_time_minutes'] = None

        # set to None if overtime_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.overtime_minutes is None and "overtime_minutes" in self.model_fields_set:
            _dict['overtime_minutes'] = None

        # set to None if assigned_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_time_minutes is None and "assigned_time_minutes" in self.model_fields_set:
            _dict['assigned_time_minutes'] = None

        # set to None if recovered_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.recovered_time_minutes is None and "recovered_time_minutes" in self.model_fields_set:
            _dict['recovered_time_minutes'] = None

        # set to None if pto_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.pto_time_minutes is None and "pto_time_minutes" in self.model_fields_set:
            _dict['pto_time_minutes'] = None

        # set to None if flextime_negative_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.flextime_negative_minutes is None and "flextime_negative_minutes" in self.model_fields_set:
            _dict['flextime_negative_minutes'] = None

        # set to None if flextime_positive_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.flextime_positive_minutes is None and "flextime_positive_minutes" in self.model_fields_set:
            _dict['flextime_positive_minutes'] = None

        # set to None if flextime_balance_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.flextime_balance_minutes is None and "flextime_balance_minutes" in self.model_fields_set:
            _dict['flextime_balance_minutes'] = None

        # set to None if active_days (nullable) is None
        # and model_fields_set contains the field
        if self.active_days is None and "active_days" in self.model_fields_set:
            _dict['active_days'] = None

        # set to None if expected_days (nullable) is None
        # and model_fields_set contains the field
        if self.expected_days is None and "expected_days" in self.model_fields_set:
            _dict['expected_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PeriodMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PeriodMetrics) in the input: " + _key)

        _obj = cls.model_validate({
            "expected_time_minutes": obj.get("expected_time_minutes"),
            "overtime_minutes": obj.get("overtime_minutes"),
            "assigned_time_minutes": obj.get("assigned_time_minutes"),
            "recovered_time_minutes": obj.get("recovered_time_minutes"),
            "pto_time_minutes": obj.get("pto_time_minutes"),
            "flextime_negative_minutes": obj.get("flextime_negative_minutes"),
            "flextime_positive_minutes": obj.get("flextime_positive_minutes"),
            "flextime_balance_minutes": obj.get("flextime_balance_minutes"),
            "active_days": obj.get("active_days"),
            "expected_days": obj.get("expected_days")
        })
        return _obj


