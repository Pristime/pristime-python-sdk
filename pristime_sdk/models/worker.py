# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pristime_sdk.models.availability import Availability
from pristime_sdk.models.balances import Balances
from pristime_sdk.models.max_consecutive_workdays import MaxConsecutiveWorkdays
from pristime_sdk.models.min_break_duration import MinBreakDuration
from pristime_sdk.models.period_contract import PeriodContract
from pristime_sdk.models.worker_cost import WorkerCost
from pristime_sdk.models.worker_revenue import WorkerRevenue
from typing import Optional, Set
from typing_extensions import Self

class Worker(BaseModel):
    """
    Represents a staff member available for shift assignment in workforce scheduling.  A Worker contains all the information needed to determine shift compatibility and assignment optimality including:  **Key Information:** - Basic identification and contact details - Work availability periods (preferred, unpreferred, unavailable times) - Skills and qualifications for matching with shift requirements - Labor constraints (consecutive workdays, break requirements, etc.) - Time balance tracking (overtime, flextime accumulated hours) - Cost and revenue parameters for optimization calculations  **Assignment Compatibility:** The system automatically checks worker-shift compatibility based on: - Skills matching (worker must have all skills required by shift) - Time availability (shift must not overlap unavailable periods) - Work constraints (respect minimum breaks, maximum consecutive days) - Contract limits (daily/weekly hour restrictions)  **Optimization Impact:** Each worker has cost/revenue parameters that influence the optimization algorithm's assignment decisions to balance operational efficiency with labor costs and worker preferences.
    """ # noqa: E501
    id: StrictStr = Field(description="Your system's unique identifier for this worker (e.g., employee ID, database primary key).")
    name: StrictStr = Field(description="Worker's display name for scheduling interfaces and reports.")
    min_break_duration: Optional[MinBreakDuration] = None
    max_consecutive_workdays: Optional[MaxConsecutiveWorkdays] = None
    balances: Optional[Balances] = None
    periods: Optional[List[PeriodContract]] = Field(default=None, description="Contract periods defining work expectations, time limits, and labor rules for different date ranges.")
    availability: Optional[Availability] = None
    costs: Optional[WorkerCost] = None
    revenues: Optional[WorkerRevenue] = None
    __properties: ClassVar[List[str]] = ["id", "name", "min_break_duration", "max_consecutive_workdays", "balances", "periods", "availability", "costs", "revenues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Worker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of min_break_duration
        if self.min_break_duration:
            _dict['min_break_duration'] = self.min_break_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_consecutive_workdays
        if self.max_consecutive_workdays:
            _dict['max_consecutive_workdays'] = self.max_consecutive_workdays.to_dict()
        # override the default output from pydantic by calling `to_dict()` of balances
        if self.balances:
            _dict['balances'] = self.balances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item_periods in self.periods:
                if _item_periods:
                    _items.append(_item_periods.to_dict())
            _dict['periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of availability
        if self.availability:
            _dict['availability'] = self.availability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of costs
        if self.costs:
            _dict['costs'] = self.costs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revenues
        if self.revenues:
            _dict['revenues'] = self.revenues.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Worker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Worker) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "min_break_duration": MinBreakDuration.from_dict(obj["min_break_duration"]) if obj.get("min_break_duration") is not None else None,
            "max_consecutive_workdays": MaxConsecutiveWorkdays.from_dict(obj["max_consecutive_workdays"]) if obj.get("max_consecutive_workdays") is not None else None,
            "balances": Balances.from_dict(obj["balances"]) if obj.get("balances") is not None else None,
            "periods": [PeriodContract.from_dict(_item) for _item in obj["periods"]] if obj.get("periods") is not None else None,
            "availability": Availability.from_dict(obj["availability"]) if obj.get("availability") is not None else None,
            "costs": WorkerCost.from_dict(obj["costs"]) if obj.get("costs") is not None else None,
            "revenues": WorkerRevenue.from_dict(obj["revenues"]) if obj.get("revenues") is not None else None
        })
        return _obj


