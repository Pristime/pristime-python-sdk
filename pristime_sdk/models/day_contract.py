# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Authorization` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from pristime_sdk.models.day_allow import DayAllow
from pristime_sdk.models.day_costs import DayCosts
from pristime_sdk.models.day_time_constraints import DayTimeConstraints
from typing import Optional, Set
from typing_extensions import Self

class DayContract(BaseModel):
    """
    Complete daily contract configuration for a worker on a specific date.  This is the primary class for defining how a worker can be scheduled on any given day. It combines time constraints and cost parameters to provide a complete picture of the worker's daily contract obligations and limitations.  **Main Components:** - **Time Constraints**: Daily hour limits and requirements (min/max work time, overtime, PTO) - **Cost Parameters**: How different types of time affect optimization calculations - **Policy Settings**: Rules for combining different time types (overtime + PTO, etc.)
    """ # noqa: E501
    time_constraints: Optional[DayTimeConstraints] = None
    allow: Optional[DayAllow] = None
    costs: Optional[DayCosts] = None
    overtime_factor: Optional[StrictInt] = Field(default=1, description="Multiplier applied to overtime hours before adding to the worker's overtime balance. Values >1 accumulate overtime debt faster.")
    __properties: ClassVar[List[str]] = ["time_constraints", "allow", "costs", "overtime_factor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DayContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_constraints
        if self.time_constraints:
            _dict['time_constraints'] = self.time_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allow
        if self.allow:
            _dict['allow'] = self.allow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of costs
        if self.costs:
            _dict['costs'] = self.costs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DayContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in DayContract) in the input: " + _key)

        _obj = cls.model_validate({
            "time_constraints": DayTimeConstraints.from_dict(obj["time_constraints"]) if obj.get("time_constraints") is not None else None,
            "allow": DayAllow.from_dict(obj["allow"]) if obj.get("allow") is not None else None,
            "costs": DayCosts.from_dict(obj["costs"]) if obj.get("costs") is not None else None,
            "overtime_factor": obj.get("overtime_factor") if obj.get("overtime_factor") is not None else 1
        })
        return _obj


