# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DayMetrics(BaseModel):
    """
    Tracks actual time worked and contract fulfillment for a specific date.  This class contains the actual values that result from scheduling decisions, as opposed to the constraints and limits defined elsewhere. It tracks both worker-level metrics (when they worked) and contract-level metrics (how contract obligations were met).  **Key Concepts:** - **Expected Time**: Hours the worker is contracted to work (paid regardless) - **Overtime**: Hours worked beyond the expected/standard time - **Assigned Time**: Actual hours assigned to shifts - **Flextime**: Difference between contracted and actual hours (can be positive or negative) - **Active Day**: Any day where the worker has time obligations (expected or overtime)  **Usage:** Set values to None where no tracking is needed for that metric.
    """ # noqa: E501
    start_datetime: Optional[datetime] = None
    end_datetime: Optional[datetime] = None
    idle_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    has_exceeded_preferred_max_consecutive_workdays_limit: Optional[StrictBool] = None
    has_scheduled_time: Optional[StrictBool] = None
    has_expected_time: Optional[StrictBool] = None
    has_overtime: Optional[StrictBool] = None
    has_assigned_time: Optional[StrictBool] = None
    has_max_expected_time_reached: Optional[StrictBool] = None
    has_any_max_expected_reached: Optional[StrictBool] = None
    expected_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    overtime_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    assigned_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    recovered_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    pto_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    flextime_negative_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    flextime_positive_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    overtime_balance_minutes: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["start_datetime", "end_datetime", "idle_time_minutes", "has_exceeded_preferred_max_consecutive_workdays_limit", "has_scheduled_time", "has_expected_time", "has_overtime", "has_assigned_time", "has_max_expected_time_reached", "has_any_max_expected_reached", "expected_time_minutes", "overtime_minutes", "assigned_time_minutes", "recovered_time_minutes", "pto_time_minutes", "flextime_negative_minutes", "flextime_positive_minutes", "overtime_balance_minutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DayMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.start_datetime is None and "start_datetime" in self.model_fields_set:
            _dict['start_datetime'] = None

        # set to None if end_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.end_datetime is None and "end_datetime" in self.model_fields_set:
            _dict['end_datetime'] = None

        # set to None if idle_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.idle_time_minutes is None and "idle_time_minutes" in self.model_fields_set:
            _dict['idle_time_minutes'] = None

        # set to None if has_exceeded_preferred_max_consecutive_workdays_limit (nullable) is None
        # and model_fields_set contains the field
        if self.has_exceeded_preferred_max_consecutive_workdays_limit is None and "has_exceeded_preferred_max_consecutive_workdays_limit" in self.model_fields_set:
            _dict['has_exceeded_preferred_max_consecutive_workdays_limit'] = None

        # set to None if has_scheduled_time (nullable) is None
        # and model_fields_set contains the field
        if self.has_scheduled_time is None and "has_scheduled_time" in self.model_fields_set:
            _dict['has_scheduled_time'] = None

        # set to None if has_expected_time (nullable) is None
        # and model_fields_set contains the field
        if self.has_expected_time is None and "has_expected_time" in self.model_fields_set:
            _dict['has_expected_time'] = None

        # set to None if has_overtime (nullable) is None
        # and model_fields_set contains the field
        if self.has_overtime is None and "has_overtime" in self.model_fields_set:
            _dict['has_overtime'] = None

        # set to None if has_assigned_time (nullable) is None
        # and model_fields_set contains the field
        if self.has_assigned_time is None and "has_assigned_time" in self.model_fields_set:
            _dict['has_assigned_time'] = None

        # set to None if has_max_expected_time_reached (nullable) is None
        # and model_fields_set contains the field
        if self.has_max_expected_time_reached is None and "has_max_expected_time_reached" in self.model_fields_set:
            _dict['has_max_expected_time_reached'] = None

        # set to None if has_any_max_expected_reached (nullable) is None
        # and model_fields_set contains the field
        if self.has_any_max_expected_reached is None and "has_any_max_expected_reached" in self.model_fields_set:
            _dict['has_any_max_expected_reached'] = None

        # set to None if expected_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.expected_time_minutes is None and "expected_time_minutes" in self.model_fields_set:
            _dict['expected_time_minutes'] = None

        # set to None if overtime_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.overtime_minutes is None and "overtime_minutes" in self.model_fields_set:
            _dict['overtime_minutes'] = None

        # set to None if assigned_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_time_minutes is None and "assigned_time_minutes" in self.model_fields_set:
            _dict['assigned_time_minutes'] = None

        # set to None if recovered_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.recovered_time_minutes is None and "recovered_time_minutes" in self.model_fields_set:
            _dict['recovered_time_minutes'] = None

        # set to None if pto_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.pto_time_minutes is None and "pto_time_minutes" in self.model_fields_set:
            _dict['pto_time_minutes'] = None

        # set to None if flextime_negative_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.flextime_negative_minutes is None and "flextime_negative_minutes" in self.model_fields_set:
            _dict['flextime_negative_minutes'] = None

        # set to None if flextime_positive_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.flextime_positive_minutes is None and "flextime_positive_minutes" in self.model_fields_set:
            _dict['flextime_positive_minutes'] = None

        # set to None if overtime_balance_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.overtime_balance_minutes is None and "overtime_balance_minutes" in self.model_fields_set:
            _dict['overtime_balance_minutes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DayMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_datetime": obj.get("start_datetime"),
            "end_datetime": obj.get("end_datetime"),
            "idle_time_minutes": obj.get("idle_time_minutes"),
            "has_exceeded_preferred_max_consecutive_workdays_limit": obj.get("has_exceeded_preferred_max_consecutive_workdays_limit"),
            "has_scheduled_time": obj.get("has_scheduled_time"),
            "has_expected_time": obj.get("has_expected_time"),
            "has_overtime": obj.get("has_overtime"),
            "has_assigned_time": obj.get("has_assigned_time"),
            "has_max_expected_time_reached": obj.get("has_max_expected_time_reached"),
            "has_any_max_expected_reached": obj.get("has_any_max_expected_reached"),
            "expected_time_minutes": obj.get("expected_time_minutes"),
            "overtime_minutes": obj.get("overtime_minutes"),
            "assigned_time_minutes": obj.get("assigned_time_minutes"),
            "recovered_time_minutes": obj.get("recovered_time_minutes"),
            "pto_time_minutes": obj.get("pto_time_minutes"),
            "flextime_negative_minutes": obj.get("flextime_negative_minutes"),
            "flextime_positive_minutes": obj.get("flextime_positive_minutes"),
            "overtime_balance_minutes": obj.get("overtime_balance_minutes")
        })
        return _obj


