# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PeriodTimeConstraints(BaseModel):
    """
    Time constraints and limits for a worker over a specific date range (most commonly a week).  **Common Patterns:** - **40-hour work week**: contractual=2400 (40*60), min_expected=2400 (40*60), max_expected=2400 (40*60), max_overtime=600 (10 hours) - **Flexible Part-time contract**: contractual=1200 (20 hours), min_expected=900 (15 hours), max_expected=1500 (25 hours), max_overtime=300 (5 hours)  **Set to None to indicate no limit for that constraint.**
    """ # noqa: E501
    contractual_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    min_expected_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    max_expected_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    max_overtime_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    max_assigned_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    max_recovered_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    max_pto_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    max_scheduled_time_minutes: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    __properties: ClassVar[List[str]] = ["contractual_time_minutes", "min_expected_time_minutes", "max_expected_time_minutes", "max_overtime_minutes", "max_assigned_time_minutes", "max_recovered_time_minutes", "max_pto_time_minutes", "max_scheduled_time_minutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PeriodTimeConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if contractual_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.contractual_time_minutes is None and "contractual_time_minutes" in self.model_fields_set:
            _dict['contractual_time_minutes'] = None

        # set to None if min_expected_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.min_expected_time_minutes is None and "min_expected_time_minutes" in self.model_fields_set:
            _dict['min_expected_time_minutes'] = None

        # set to None if max_expected_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.max_expected_time_minutes is None and "max_expected_time_minutes" in self.model_fields_set:
            _dict['max_expected_time_minutes'] = None

        # set to None if max_overtime_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.max_overtime_minutes is None and "max_overtime_minutes" in self.model_fields_set:
            _dict['max_overtime_minutes'] = None

        # set to None if max_assigned_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.max_assigned_time_minutes is None and "max_assigned_time_minutes" in self.model_fields_set:
            _dict['max_assigned_time_minutes'] = None

        # set to None if max_recovered_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.max_recovered_time_minutes is None and "max_recovered_time_minutes" in self.model_fields_set:
            _dict['max_recovered_time_minutes'] = None

        # set to None if max_pto_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.max_pto_time_minutes is None and "max_pto_time_minutes" in self.model_fields_set:
            _dict['max_pto_time_minutes'] = None

        # set to None if max_scheduled_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.max_scheduled_time_minutes is None and "max_scheduled_time_minutes" in self.model_fields_set:
            _dict['max_scheduled_time_minutes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PeriodTimeConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractual_time_minutes": obj.get("contractual_time_minutes"),
            "min_expected_time_minutes": obj.get("min_expected_time_minutes"),
            "max_expected_time_minutes": obj.get("max_expected_time_minutes"),
            "max_overtime_minutes": obj.get("max_overtime_minutes"),
            "max_assigned_time_minutes": obj.get("max_assigned_time_minutes"),
            "max_recovered_time_minutes": obj.get("max_recovered_time_minutes"),
            "max_pto_time_minutes": obj.get("max_pto_time_minutes"),
            "max_scheduled_time_minutes": obj.get("max_scheduled_time_minutes")
        })
        return _obj


