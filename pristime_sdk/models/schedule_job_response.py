# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, Optional
from pristime_sdk.models.schedule_job_result import ScheduleJobResult
from typing import Optional, Set
from typing_extensions import Self

class ScheduleJobResponse(BaseModel):
    """
    API response wrapper for workforce scheduling optimization jobs.  This is the top-level response object returned by both synchronous and asynchronous scheduling endpoints. It provides job tracking information and contains the complete optimization results when processing is complete.  **Response Structure:**  **Job Information:** - schedule_job_id: Unique identifier for tracking the job - status: Current job state (running, completed, failed) - message: Human-readable status updates or error information  **Optimization Results:** - result: Complete scheduling results (only present when status='completed')  **Status Values:** - **'running'**: Job is still processing (async jobs only) - **'completed'**: Job finished successfully, results available - **'failed'**: Job encountered an error, check message for details  **Usage Patterns:**  **Asynchronous Jobs** (POST /schedule-jobs, GET /schedule-jobs/{id}): - POST returns immediately with status='running' and job ID - Use GET to poll for completion and retrieve results - Recommended for production workloads  **Error Handling:** - Check status before processing results - Use message for error details when status='failed'
    """ # noqa: E501
    schedule_job_id: StrictStr = Field(description="Unique identifier for this scheduling job. Use this ID to track job progress and retrieve results via GET /schedule-jobs/{id}.")
    status: StrictStr = Field(description="Current job status: 'running' (still processing), 'completed' (finished successfully), or 'failed' (encountered error).")
    message: Optional[StrictStr] = None
    result: Optional[ScheduleJobResult] = None
    __properties: ClassVar[List[str]] = ["schedule_job_id", "status", "message", "result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleJobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict['result'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleJobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schedule_job_id": obj.get("schedule_job_id"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "result": ScheduleJobResult.from_dict(obj["result"]) if obj.get("result") is not None else None
        })
        return _obj


