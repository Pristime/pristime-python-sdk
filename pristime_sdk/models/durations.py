# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from pristime_sdk.models.provided_shifts_durations import ProvidedShiftsDurations
from typing import Optional, Set
from typing_extensions import Self

class Durations(BaseModel):
    """
    Complete duration summary of all scheduling changes and new shift creation.  Provides a comprehensive view of how many minutes of work were affected by the optimization, split between modifications to your existing shifts and automatic creation of new shifts to meet demands.  **Total Impact Calculation:** - Changed work = provided.changed_assignment + provided.gained_assignment + provided.lost_assignment - New work = created - Total optimization impact = changed work + new work  **Usage:** - Track optimization effectiveness and coverage improvements - Calculate billing for usage-based pricing models - Estimate communication needs for schedule change notifications
    """ # noqa: E501
    provided: ProvidedShiftsDurations
    created: StrictInt = Field(description="Total minutes of new shifts automatically created by the optimization algorithm. These shifts are always assigned to workers and represent additional coverage beyond your original request.")
    __properties: ClassVar[List[str]] = ["provided", "created"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Durations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provided
        if self.provided:
            _dict['provided'] = self.provided.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Durations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Durations) in the input: " + _key)

        _obj = cls.model_validate({
            "provided": ProvidedShiftsDurations.from_dict(obj["provided"]) if obj.get("provided") is not None else None,
            "created": obj.get("created")
        })
        return _obj


