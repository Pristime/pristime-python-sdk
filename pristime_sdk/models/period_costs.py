# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PeriodCosts(BaseModel):
    """
    Cost structure for period-level contract optimization.  These cost parameters influence how the optimization algorithm makes scheduling decisions over longer time periods (weeks, months). Higher costs discourage certain types of scheduling patterns, while lower costs make them more attractive.  **How Costs Work in Optimization:** The algorithm tries to minimize total cost while meeting all constraints and demands. By adjusting these cost parameters, you can influence scheduling priorities:  **Cost Strategies:** - **High expected_hour cost**: Discourages scheduling beyond minimum guaranteed hours - **High flextime cost**: Encourages consistent scheduling around contractual hours - **Low undertime cost**: Allows some flexibility when full hours aren't needed  **Example Impact:** If per_expected_hour=100 and a shift revenue=80, the algorithm won't assign the shift unless it helps meet other constraints, since the cost exceeds the revenue.
    """ # noqa: E501
    per_expected_hour: Optional[StrictInt] = Field(default=0, description="Cost per hour of guaranteed time in the period. This discourages over-scheduling beyond minimum requirements. Set higher to prioritize cost control, lower to ensure full utilization.")
    per_flextime_positive_hour: Optional[StrictInt] = Field(default=8, description="Cost per hour of positive flextime (time above contractual hours). Higher values encourage more consistent scheduling around standard contract hours rather than fluctuating weeks.")
    per_undertime_hour: Optional[StrictInt] = Field(default=10, description="Small cost per hour of undertime (when scheduled time is below expected). Provides gentle pressure to meet minimum hour requirements without being too restrictive.")
    __properties: ClassVar[List[str]] = ["per_expected_hour", "per_flextime_positive_hour", "per_undertime_hour"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PeriodCosts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PeriodCosts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PeriodCosts) in the input: " + _key)

        _obj = cls.model_validate({
            "per_expected_hour": obj.get("per_expected_hour") if obj.get("per_expected_hour") is not None else 0,
            "per_flextime_positive_hour": obj.get("per_flextime_positive_hour") if obj.get("per_flextime_positive_hour") is not None else 8,
            "per_undertime_hour": obj.get("per_undertime_hour") if obj.get("per_undertime_hour") is not None else 10
        })
        return _obj


