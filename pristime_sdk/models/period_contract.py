# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from pristime_sdk.models.day_contract import DayContract
from pristime_sdk.models.period_costs import PeriodCosts
from pristime_sdk.models.period_day_constraints import PeriodDayConstraints
from pristime_sdk.models.period_time_constraints import PeriodTimeConstraints
from typing import Optional, Set
from typing_extensions import Self

class PeriodContract(BaseModel):
    """
    PeriodContract represents the constraints of the contract over a period (usually a week).  **Key Features:** - **Time Limits**: Weekly/monthly hour minimums and maximums - **Day Limits**: How many days can be worked in the period - **Cost Management**: Period-level cost calculations for optimization - **Flextime Tracking**: Accumulated time debt/credit over the period - **Individual Day Rules**: Specific constraints for dates within the period  **Relationship to Daily Rules:** PeriodContract works alongside DayContract - the daily rules must be consistent with the period rules. For example, if weekly max is 40 hours, daily maximums should allow this to be achievable.
    """ # noqa: E501
    start_date: date = Field(description="First date (inclusive) of the contract period. All period-level rules and limits begin applying from this date.")
    end_date: date = Field(description="Last date (inclusive) of the contract period. All period-level rules and limits stop applying after this date.")
    time_constraints: Optional[PeriodTimeConstraints] = None
    day_constraints: Optional[PeriodDayConstraints] = None
    days: Optional[Dict[str, DayContract]] = None
    costs: Optional[PeriodCosts] = None
    flextime_factor: Optional[StrictInt] = Field(default=1, description="Factor by which the flextime is multiplied before being added to the flextime_balance.")
    __properties: ClassVar[List[str]] = ["start_date", "end_date", "time_constraints", "day_constraints", "days", "costs", "flextime_factor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PeriodContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_constraints
        if self.time_constraints:
            _dict['time_constraints'] = self.time_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of day_constraints
        if self.day_constraints:
            _dict['day_constraints'] = self.day_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in days (dict)
        _field_dict = {}
        if self.days:
            for _key_days in self.days:
                if self.days[_key_days]:
                    _field_dict[_key_days] = self.days[_key_days].to_dict()
            _dict['days'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of costs
        if self.costs:
            _dict['costs'] = self.costs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PeriodContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PeriodContract) in the input: " + _key)

        _obj = cls.model_validate({
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "time_constraints": PeriodTimeConstraints.from_dict(obj["time_constraints"]) if obj.get("time_constraints") is not None else None,
            "day_constraints": PeriodDayConstraints.from_dict(obj["day_constraints"]) if obj.get("day_constraints") is not None else None,
            "days": dict(
                (_k, DayContract.from_dict(_v))
                for _k, _v in obj["days"].items()
            )
            if obj.get("days") is not None
            else None,
            "costs": PeriodCosts.from_dict(obj["costs"]) if obj.get("costs") is not None else None,
            "flextime_factor": obj.get("flextime_factor") if obj.get("flextime_factor") is not None else 1
        })
        return _obj


