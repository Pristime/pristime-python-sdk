# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict
from typing import Optional, Set
from typing_extensions import Self

class ProvidedShiftsDurations(BaseModel):
    """
    These metrics help you understand how much of your schedule was modified during optimization and the nature of those changes. All values are in minutes.  **Assignment Change Patterns:**  **Stability Metrics:** - kept_assignment: Shifts that kept their original worker assignments - remained_unassigned: Shifts that stayed unassigned (no available workers)  **Change Metrics:** - changed_assignment: Assigned shifts that got different workers - lost_assignment: Previously assigned shifts that became unassigned - gained_assignment: Unassigned shifts that got workers
    """ # noqa: E501
    kept_assignment_minutes: StrictInt = Field(description="Total minutes of shifts that kept their original worker assignment. High values indicate scheduling stability with minimal disruption.")
    changed_assignment_minutes: StrictInt = Field(description="Total minutes of shifts that were reassigned to different workers.")
    lost_assignment_minutes: StrictInt = Field(description="Total minutes of previously assigned shifts that became unassigned.")
    remained_unassigned_minutes: StrictInt = Field(description="Total minutes of shifts that stayed unassigned.")
    gained_assignment_minutes: StrictInt = Field(description="Total minutes of previously unassigned shifts that gained workers.")
    __properties: ClassVar[List[str]] = ["kept_assignment_minutes", "changed_assignment_minutes", "lost_assignment_minutes", "remained_unassigned_minutes", "gained_assignment_minutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvidedShiftsDurations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvidedShiftsDurations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kept_assignment_minutes": obj.get("kept_assignment_minutes"),
            "changed_assignment_minutes": obj.get("changed_assignment_minutes"),
            "lost_assignment_minutes": obj.get("lost_assignment_minutes"),
            "remained_unassigned_minutes": obj.get("remained_unassigned_minutes"),
            "gained_assignment_minutes": obj.get("gained_assignment_minutes")
        })
        return _obj


