# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Authorization` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pristime_sdk.models.schedule_job_response import ScheduleJobResponse

class TestScheduleJobResponse(unittest.TestCase):
    """ScheduleJobResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScheduleJobResponse:
        """Test ScheduleJobResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ScheduleJobResponse`
        """
        model = ScheduleJobResponse()
        if include_optional:
            return ScheduleJobResponse(
                schedule_job_id = '',
                status = '',
                message = '',
                result = pristime_sdk.models.schedule_job_result.ScheduleJobResult(
                    metrics = pristime_sdk.models.metrics.Metrics(
                        start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        profit = 1.337, 
                        partial_profit = 1.337, 
                        pto_time_revenue = 1.337, 
                        assignment_revenue = 1.337, 
                        skill_revenue = 1.337, 
                        continuity_revenue = 1.337, 
                        demand_revenue = 1.337, 
                        preferred_time_revenue = 1.337, 
                        variable_costs = 1.337, 
                        overtime_cost = 1.337, 
                        has_exceeded_preferred_max_consecutive_workdays_limit_cost = 1.337, 
                        idle_time_cost = 1.337, 
                        assignment_cost = 1.337, 
                        unpreferred_time_cost = 1.337, 
                        period_closing_profit = 1.337, 
                        flextime_balance_negative_revenue = 1.337, 
                        flextime_balance_positive_cost = 1.337, 
                        overtime_balance_cost = 1.337, 
                        assigned_time = 1.337, 
                        overtime = 1.337, 
                        recovered_time = 1.337, ), 
                    shifts = pristime_sdk.models.shifts.Shifts(
                        provided = {
                            'key' : pristime_sdk.models.shift_assignment_result.ShiftAssignmentResult(
                                worker_id = '', 
                                previous_worker_id = '', )
                            }, 
                        created = [
                            pristime_sdk.models.shift.Shift(
                                start_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                timezone = '', 
                                id = '', 
                                label = '', 
                                revenues = pristime_sdk.models.shift_revenues.ShiftRevenues(
                                    per_assigned_hour = 56, 
                                    continuity_revenue = 56, ), 
                                revenue = 56, 
                                breaks = [
                                    pristime_sdk.models.period.Period(
                                        start_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        end_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], 
                                tags = [
                                    ''
                                    ], 
                                required_skills = [
                                    ''
                                    ], 
                                assignment = pristime_sdk.models.shift_assignment.ShiftAssignment(
                                    worker_id = '', 
                                    is_locked = True, ), 
                                preceding_shift_id = '', )
                            ], ), 
                    durations = pristime_sdk.models.durations.Durations(
                        provided = pristime_sdk.models.provided_shifts_durations.ProvidedShiftsDurations(
                            kept_assignment_minutes = 56, 
                            changed_assignment_minutes = 56, 
                            lost_assignment_minutes = 56, 
                            remained_unassigned_minutes = 56, 
                            gained_assignment_minutes = 56, ), 
                        created = 56, ), 
                    broken_constraints = pristime_sdk.models.broken_constraints.BrokenConstraints(
                        warnings = [
                            ''
                            ], 
                        errors = [
                            ''
                            ], ), 
                    workers = {
                        'key' : pristime_sdk.models.worker_metrics.WorkerMetrics(
                            period_metrics = [
                                pristime_sdk.models.period_metrics.PeriodMetrics(
                                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    day_metrics = {
                                        'key' : pristime_sdk.models.day_metrics.DayMetrics(
                                            start_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            end_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            idle_time_minutes = 0.0, 
                                            has_exceeded_preferred_max_consecutive_workdays_limit = True, 
                                            has_scheduled_time = True, 
                                            has_expected_time = True, 
                                            has_overtime = True, 
                                            has_assigned_time = True, 
                                            has_max_expected_time_reached = True, 
                                            has_any_max_expected_reached = True, 
                                            expected_time_minutes = 0.0, 
                                            overtime_minutes = 0.0, 
                                            assigned_time_minutes = 0.0, 
                                            recovered_time_minutes = 0.0, 
                                            pto_time_minutes = 0.0, 
                                            flextime_negative_minutes = 0.0, 
                                            flextime_positive_minutes = 0.0, 
                                            overtime_balance_minutes = 56, )
                                        }, 
                                    expected_time_minutes = 0.0, 
                                    overtime_minutes = 0.0, 
                                    assigned_time_minutes = 0.0, 
                                    recovered_time_minutes = 0.0, 
                                    pto_time_minutes = 0.0, 
                                    flextime_negative_minutes = 0.0, 
                                    flextime_positive_minutes = 0.0, 
                                    flextime_balance_minutes = 56, 
                                    scheduled_days = 0.0, 
                                    expected_days = 0.0, )
                                ], )
                        }, )
            )
        else:
            return ScheduleJobResponse(
                schedule_job_id = '',
                status = '',
        )
        """

    def testScheduleJobResponse(self):
        """Test ScheduleJobResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
