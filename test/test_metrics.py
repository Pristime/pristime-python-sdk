# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pristime_sdk.models.metrics import Metrics

class TestMetrics(unittest.TestCase):
    """Metrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Metrics:
        """Test Metrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Metrics`
        """
        model = Metrics()
        if include_optional:
            return Metrics(
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                profit = 1.337,
                partial_profit = 1.337,
                pto_time_revenue = 1.337,
                assignment_revenue = 1.337,
                skill_revenue = 1.337,
                continuity_revenue = 1.337,
                demand_revenue = 1.337,
                preferred_time_revenue = 1.337,
                variable_costs = 1.337,
                overtime_cost = 1.337,
                has_exceeded_preferred_max_consecutive_workdays_limit_cost = 1.337,
                idle_time_cost = 1.337,
                assignment_cost = 1.337,
                unpreferred_time_cost = 1.337,
                period_closing_profit = 1.337,
                flextime_balance_negative_revenue = 1.337,
                flextime_balance_positive_cost = 1.337,
                overtime_balance_cost = 1.337,
                assigned_time = 1.337,
                overtime = 1.337,
                recovered_time = 1.337
            )
        else:
            return Metrics(
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                profit = 1.337,
                partial_profit = 1.337,
                pto_time_revenue = 1.337,
                assignment_revenue = 1.337,
                skill_revenue = 1.337,
                continuity_revenue = 1.337,
                demand_revenue = 1.337,
                preferred_time_revenue = 1.337,
                variable_costs = 1.337,
                overtime_cost = 1.337,
                has_exceeded_preferred_max_consecutive_workdays_limit_cost = 1.337,
                idle_time_cost = 1.337,
                assignment_cost = 1.337,
                unpreferred_time_cost = 1.337,
                period_closing_profit = 1.337,
                flextime_balance_negative_revenue = 1.337,
                flextime_balance_positive_cost = 1.337,
                overtime_balance_cost = 1.337,
                assigned_time = 1.337,
                overtime = 1.337,
                recovered_time = 1.337,
        )
        """

    def testMetrics(self):
        """Test Metrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
