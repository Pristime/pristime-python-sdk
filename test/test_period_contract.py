# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pristime_sdk.models.period_contract import PeriodContract

class TestPeriodContract(unittest.TestCase):
    """PeriodContract unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PeriodContract:
        """Test PeriodContract
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PeriodContract`
        """
        model = PeriodContract()
        if include_optional:
            return PeriodContract(
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                time_constraints = pristime_sdk.models.period_time_constraints.PeriodTimeConstraints(
                    contractual_time_minutes = 0.0, 
                    min_expected_time_minutes = 0.0, 
                    max_expected_time_minutes = 0.0, 
                    max_overtime_minutes = 0.0, 
                    max_assigned_time_minutes = 0.0, 
                    max_recovered_time_minutes = 0.0, 
                    max_pto_time_minutes = 0.0, 
                    max_scheduled_time_minutes = 0.0, ),
                day_constraints = pristime_sdk.models.period_day_constraints.PeriodDayConstraints(
                    max_expected_days = 0.0, 
                    max_scheduled_days = 0.0, ),
                days = {
                    'key' : pristime_sdk.models.day_contract.DayContract(
                        time_constraints = pristime_sdk.models.day_time_constraints.DayTimeConstraints(
                            contractual_minutes = 0.0, 
                            min_expected_time_minutes = 0.0, 
                            max_expected_time_minutes = 0.0, 
                            max_overtime_minutes = 0.0, 
                            min_assigned_time_minutes = 0.0, 
                            max_assigned_time_minutes = 0.0, 
                            max_recovered_time_minutes = 0.0, 
                            max_pto_time_minutes = 0.0, 
                            max_scheduled_time_minutes = 0.0, ), 
                        allow = pristime_sdk.models.day_allow.DayAllow(
                            overtime_with_recovery = True, 
                            overtime_with_pto = True, ), 
                        costs = pristime_sdk.models.day_costs.DayCosts(
                            per_expected_hour = 56, 
                            per_flextime_positive_hour = 56, 
                            per_overtime_hour = 56, 
                            per_assigned_hour = 56, 
                            per_idle_hour_between_shifts = 56, 
                            per_undertime_hour = 56, ), 
                        overtime_factor = 56, )
                    },
                costs = pristime_sdk.models.period_costs.PeriodCosts(
                    per_expected_hour = 56, 
                    per_flextime_positive_hour = 56, 
                    per_undertime_hour = 56, ),
                flextime_factor = 56
            )
        else:
            return PeriodContract(
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
        )
        """

    def testPeriodContract(self):
        """Test PeriodContract"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
