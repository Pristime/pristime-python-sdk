# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Authorization` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pristime_sdk.models.day_metrics import DayMetrics

class TestDayMetrics(unittest.TestCase):
    """DayMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DayMetrics:
        """Test DayMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DayMetrics`
        """
        model = DayMetrics()
        if include_optional:
            return DayMetrics(
                start_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                idle_time_minutes = 0.0,
                has_exceeded_preferred_max_consecutive_workdays_limit = True,
                has_scheduled_time = True,
                has_expected_time = True,
                has_overtime = True,
                has_assigned_time = True,
                has_max_expected_time_reached = True,
                has_any_max_expected_reached = True,
                expected_time_minutes = 0.0,
                overtime_minutes = 0.0,
                assigned_time_minutes = 0.0,
                recovered_time_minutes = 0.0,
                pto_time_minutes = 0.0,
                flextime_negative_minutes = 0.0,
                flextime_positive_minutes = 0.0,
                overtime_balance_minutes = 56
            )
        else:
            return DayMetrics(
        )
        """

    def testDayMetrics(self):
        """Test DayMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
