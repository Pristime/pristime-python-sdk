# coding: utf-8

"""
    Pristime Workforce Scheduling API

             ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Authorization` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com         

    The version of the OpenAPI document: 2.0.0
    Contact: antoine.hachez@pristime.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pristime_sdk.models.schedule_state import ScheduleState

class TestScheduleState(unittest.TestCase):
    """ScheduleState unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScheduleState:
        """Test ScheduleState
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ScheduleState`
        """
        model = ScheduleState()
        if include_optional:
            return ScheduleState(
                scheduling_period = pristime_sdk.models.scheduling_period.SchedulingPeriod(
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    timezone = '', 
                    day_boundary_offset_minutes = 56, ),
                workers = [
                    pristime_sdk.models.worker.Worker(
                        id = '', 
                        name = '', 
                        min_break_duration = pristime_sdk.models.min_break_duration.MinBreakDuration(
                            between_shifts_minutes = 0.0, 
                            between_days_minutes = 0.0, ), 
                        max_consecutive_workdays = pristime_sdk.models.max_consecutive_workdays.MaxConsecutiveWorkdays(
                            absolute = 0.0, 
                            preferred = 0.0, ), 
                        balances = pristime_sdk.models.balances.Balances(
                            overtime_balance = pristime_sdk.models.balance.Balance(
                                current_minutes = 56, 
                                min_minutes = 56, 
                                max_minutes = 56, ), 
                            flextime_balance = pristime_sdk.models.balance.Balance(
                                current_minutes = 56, 
                                min_minutes = 56, 
                                max_minutes = 56, ), ), 
                        periods = [
                            pristime_sdk.models.period_contract.PeriodContract(
                                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                time_constraints = pristime_sdk.models.period_time_constraints.PeriodTimeConstraints(
                                    contractual_time_minutes = 0.0, 
                                    min_expected_time_minutes = 0.0, 
                                    max_expected_time_minutes = 0.0, 
                                    max_overtime_minutes = 0.0, 
                                    max_assigned_time_minutes = 0.0, 
                                    max_recovered_time_minutes = 0.0, 
                                    max_pto_time_minutes = 0.0, 
                                    max_scheduled_time_minutes = 0.0, ), 
                                day_constraints = pristime_sdk.models.period_day_constraints.PeriodDayConstraints(
                                    max_expected_days = 0.0, 
                                    max_scheduled_days = 0.0, ), 
                                days = {
                                    'key' : pristime_sdk.models.day_contract.DayContract(
                                        time_constraints = pristime_sdk.models.day_time_constraints.DayTimeConstraints(
                                            contractual_time_minutes = 0.0, 
                                            min_expected_time_minutes = 0.0, 
                                            max_expected_time_minutes = 0.0, 
                                            max_overtime_minutes = 0.0, 
                                            min_assigned_time_minutes = 0.0, 
                                            max_assigned_time_minutes = 0.0, 
                                            max_recovered_time_minutes = 0.0, 
                                            max_pto_time_minutes = 0.0, 
                                            max_scheduled_time_minutes = 0.0, ), 
                                        allow = pristime_sdk.models.day_allow.DayAllow(
                                            overtime_with_recovery = True, 
                                            overtime_with_pto = True, ), 
                                        costs = pristime_sdk.models.day_costs.DayCosts(
                                            per_expected_hour = 56, 
                                            per_flextime_positive_hour = 56, 
                                            per_overtime_hour = 56, 
                                            per_assigned_hour = 56, 
                                            per_idle_hour_between_shifts = 56, 
                                            per_undertime_hour = 56, ), 
                                        overtime_factor = 56, )
                                    }, 
                                costs = pristime_sdk.models.period_costs.PeriodCosts(
                                    per_expected_hour = 56, 
                                    per_flextime_positive_hour = 56, 
                                    per_undertime_hour = 56, ), 
                                flextime_factor = 56, )
                            ], 
                        availability = pristime_sdk.models.availability.Availability(
                            unavailable_periods = [
                                pristime_sdk.models.period.Period(
                                    start_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    end_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            preferred_periods = [
                                pristime_sdk.models.period.Period(
                                    start_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    end_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            unpreferred_periods = [
                                
                                ], ), 
                        costs = pristime_sdk.models.worker_cost.WorkerCost(
                            per_hour_of_positive_flextime_balance = 56, 
                            per_hour_of_positive_overtime_balance = 56, 
                            per_hour_of_unpreferred_period = 56, ), 
                        revenues = pristime_sdk.models.worker_revenue.WorkerRevenue(
                            per_hour_of_negative_flextime_balance = 56, 
                            per_hour_of_pto = 56, 
                            per_hour_of_preferred_period = 56, 
                            per_hour_of_skilled_work = {
                                'key' : 56
                                }, 
                            per_hour_of_tagged_work = {
                                'key' : 56
                                }, ), )
                    ],
                shifts = [
                    pristime_sdk.models.shift.Shift(
                        start_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        timezone = '', 
                        id = '', 
                        label = '', 
                        revenues = pristime_sdk.models.shift_revenues.ShiftRevenues(
                            per_assigned_hour = 56, 
                            continuity_revenue = 56, ), 
                        revenue = 56, 
                        breaks = [
                            pristime_sdk.models.period.Period(
                                start_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        tags = [
                            ''
                            ], 
                        required_skills = [
                            ''
                            ], 
                        assignment = pristime_sdk.models.shift_assignment.ShiftAssignment(
                            worker_id = '', 
                            is_locked = True, ), 
                        preceding_shift_id = '', )
                    ],
                demands = [
                    pristime_sdk.models.demand.Demand(
                        id = '', 
                        label = '', 
                        time_series = {
                            'key' : 1.337
                            }, 
                        upper_limit_increment = 56, 
                        timezone = '', 
                        required_skills = [
                            ''
                            ], 
                        required_tags = [
                            ''
                            ], 
                        revenues = pristime_sdk.models.demand_revenue.DemandRevenue(), 
                        shift_creation_settings = pristime_sdk.models.shift_creation_settings.ShiftCreationSettings(
                            timezone = '', 
                            required_skills = [
                                ''
                                ], 
                            tags = [
                                ''
                                ], 
                            day_boundary_offset_minutes = 56, 
                            break_minutes = 30, 
                            work_duration = pristime_sdk.models.work_duration.WorkDuration(
                                min_minutes = 56, 
                                max_minutes = 56, ), 
                            continuous_work_duration_before_break = pristime_sdk.models.continuous_work_duration_before_break.ContinuousWorkDurationBeforeBreak(
                                min_minutes = 56, 
                                max_minutes = 56, ), ), )
                    ],
                config = pristime_sdk.models.schedule_job_config.ScheduleJobConfig(
                    adjust_thresholds_on_violation = True, 
                    webhook_url = '0', 
                    webhook_secret = '01234567', )
            )
        else:
            return ScheduleState(
                scheduling_period = pristime_sdk.models.scheduling_period.SchedulingPeriod(
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    timezone = '', 
                    day_boundary_offset_minutes = 56, ),
        )
        """

    def testScheduleState(self):
        """Test ScheduleState"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
